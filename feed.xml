<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://andrewmzhang.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://andrewmzhang.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-18T01:50:03+00:00</updated><id>https://andrewmzhang.com/feed.xml</id><title type="html">blank</title><subtitle>Personal site of Andrew Zhang
</subtitle><entry><title type="html">Notes on Arduino GPS Library</title><link href="https://andrewmzhang.com/blog/2021/arduino-gps-notes/" rel="alternate" type="text/html" title="Notes on Arduino GPS Library" /><published>2021-06-18T00:00:00+00:00</published><updated>2021-06-18T00:00:00+00:00</updated><id>https://andrewmzhang.com/blog/2021/arduino-gps-notes</id><content type="html" xml:base="https://andrewmzhang.com/blog/2021/arduino-gps-notes/"><![CDATA[<p>Note: I splurged on a better quality (though way more expensive) shields from sparkfun. Thus this post will probably remain unupdated.</p>

<h4 id="intro">Intro</h4>

<p>I bought DFRobot SIM 808 shield. Cheap shield. However, the library provided by DFRobot is not great. Here are my notes and possible solutions and a low quality fork.</p>

<p>On Terminology:</p>
<ul>
  <li>Board refers to the arduino. I used an Arduino Uno Rev3.</li>
  <li>Shield refers to the DFRobot Shield.</li>
</ul>

<h1 id="my-fork">My Fork</h1>
<ol>
  <li><a href="https://github.com/andrewmzhang/arduino-sim808">andrewmzhang arduino-sim808 fork</a></li>
</ol>

<p>I present my fork of the library, along with an updated version of the sample usage. The best way to use this is to un-stack the shield from the arduino and connect the power lines via male-to-male jumpers. Power pins, pin 12, pin 13 on the board should connect to analogous pins on the shield. Remap pins 2 and 3 from the arduino to pins 0 and 1 on the shield. I explain my motivation for this design below</p>

<h1 id="dfrobot-sim808-library-and-resources">DFRobot SIM808 Library and Resources</h1>

<ol>
  <li><a href="https://github.com/DFRobot/DFRobot_SIM808">DFRobot SIM808 Github Repo</a></li>
  <li><a href="https://wiki.dfrobot.com/SIM808_GPS_GPRS_GSM_Shield_SKU__TEL0097">DFRobot SIM808 Wiki Docs</a></li>
</ol>

<h2 id="pros">Pros</h2>

<p>The documentation has tool called a Serial Debugger. Super useful. You can issue direct AT (which I understand is some kind of protocol sent over Serial) commands to the shield. There’s a typo in the GPS Orientation command. It should say <code class="language-plaintext highlighter-rouge">AT + CGNS PWR = 1</code>.</p>

<h2 id="cons">Cons</h2>

<p>There are a few issues with this shield. The first issue is that the module communicates with the arduino board through the default TX RX serial ports; pins 0 and 1 are the Arduino Uno. This is a problem because those pins are also connected to the USB Serial line which means:</p>

<ol>
  <li>You cannot upload sketches without powering down the shield.</li>
  <li>All communication sent to the shield will also show up in USB Serial Monitor.</li>
  <li>Any prints done on arduino will show up on the USB Serial Monitor and will be sent to the shield.</li>
  <li>This means debugging is nuts; say you want to print out what the Sim808 library buffer is receiving from the shield and print it w/ Serial.println. This will cause a feedback loop since the library buffer will catch it again. This makes the shield a pain to debug.</li>
</ol>

<p>The Library is also not particularly well written. A lot of features are missing, such as trying to get the number of satellites in view. And the design of the library is questionable; IIRC the getGPRMS code read 1 char from the serial stream, adds it toa global buffer, checks to see if the global buffer has accumulated to a valid GPRMS (it ignores all other NMEA streams types), and fails if it doesn’t. This means you <em>need</em> to wrap calls to getGPS in a while loop since getGPS will fail a lot…</p>

<p>NOTE: I might need to double check the above. I kinda forgot how the lib actually works and I don’t wanna check at 2:26 AM… I will verify/fix this section ASAP…</p>

<h1 id="blemasle-arduino-sim808-library">blemasle arduino-sim808 library</h1>

<ol>
  <li><a href="https://github.com/blemasle/arduino-sim808">blemasle library</a></li>
</ol>

<p>This library appears to be written for the Adafruit FONA? Not sure.</p>

<h2 id="pros-1">Pros</h2>

<p>This library has super good logic, also really clean code, fully featured. Some bugs/idiosyncrasies but I’m not using the right board so eh…</p>

<h2 id="cons-1">Cons</h2>

<p>It doesn’t work on the DFRobot shield very well. Also no comments so its a pain to figure out how it works.</p>

<p>There is also a <a href="https://github.com/blemasle/arduino-sim808/issues/19">bug</a>!</p>

<h1 id="fixes">Fixes</h1>

<p>I present my fixes on the arduino-sim808 library for the DFRobot shield.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="serial-communication-with-the-sim808">Serial communication with the SIM808</h3>

<p>The solution here is to un-stack the shield and then just use male-to-male jumpers to connect over the power pins. Pins 13 and 12, and connect pins 0,1 on the shield to 2,3 on the board respectively. Then we will use software serial to communicate with the shield, and use the default 0, 1 pins to print Serial messages as per usual. This prevents the Serial prints and board buffer printouts to get feedback looped or whatever.</p>

<h3 id="power-on">Power On</h3>

<p>The shield comes with a boot switch. The documentation on the DFRWiki (link here) states that we can press the switch for 1s to power on and 3s to power off. It also states that the switch is also tied to pin D12. Do programatically hit the switch, write high to D12 for X seconds. We can use this trigger the SIM808 power on/off.</p>

<h3 id="reset-pin">Reset Pin</h3>

<p>Although there are traces on the board leading from the SIM808 SIM RESET pin on the SIM808 chip, I can’t figure out where they lead to. The Leonardo version of this shield has some jumpers to tap into that trace, but no on the arduino shield. Thus we leave this alone.</p>

<h3 id="status-pin">Status Pin</h3>

<p>Again, there are no jumpers to access this on the arduino version of the shield.</p>

<h2 id="software">Software</h2>

<p>We use the Software Serial to 2,3 to communicate with the shield.</p>

<p>I’m not sure when RDY gets sent. When I had the shield serial connected to board serial default (0,1), I never got the RDY response from the shield and setting the baud rate into non-volatile memory (AT?? command) never held across reboot. You only get the RDY if the baud is set according to the docs. Thus in the default library with the default serial comms, the sim808 gets stuck on init waiting on RDY</p>

<p>Another issue is that if the GPS fix fails (not enough satellites to perform trilateration), you cannot get any data from NMEA streams that are available; current time, number of GPS in view, etc. I have fixed this (insert github line link here)</p>]]></content><author><name>Andrew M. Zhang</name></author><category term="tech" /><category term="GPS" /><category term="SIM808" /><category term="DFRobot" /><category term="arduino" /><category term="arduino-sim808" /><summary type="html"><![CDATA[playing around with the DFRobot SIM808 shield and some SIM808 libraries...]]></summary></entry><entry><title type="html">Mosh + Tmux + Copy Paste</title><link href="https://andrewmzhang.com/blog/2020/osc-52-patch-for-vte-0425/" rel="alternate" type="text/html" title="Mosh + Tmux + Copy Paste" /><published>2020-02-06T02:01:00+00:00</published><updated>2020-02-06T02:01:00+00:00</updated><id>https://andrewmzhang.com/blog/2020/osc-52-patch-for-vte-0425</id><content type="html" xml:base="https://andrewmzhang.com/blog/2020/osc-52-patch-for-vte-0425/"><![CDATA[<p>The overarching goal is to set up what I believe to be the ideal remote development terminal setup; mosh into remote -&gt; tmux + ability to copy paste to local machine.</p>

<h3 id="background">Background</h3>

<p>To achieve the stated goal, we implement the OSC 52 escape command within the default terminal provided by the Ubuntu OS 16.04 (gnome-terminal) so I could copy and paste to the system clipboard through terminal escapes, ie <code class="language-plaintext highlighter-rouge">printf "\033]52;c;$(printf "%s" "test" | base64)\a"</code> should copy “test” into the local OS clipboard.</p>

<p>This particular version of vte was chosen due to the fact that its the default version of libvte for ubuntu 16.04, which is what I use. This patch won’t work for more modern versions of vte as the code has changed significantly.</p>

<h4 id="unsolved-problems">Unsolved problems</h4>

<p>Since the goal is for personal use on tmux, this OSC 52 patch does not cover all use cases for OSC 52. In fact this patch only supports the c; option (it assumes all OSC 52 escapes are trying to reach the clipboard). <a href="https://www.xfree86.org/current/ctlseqs.html">osc 52 documentation</a></p>

<h3 id="git-patch">Git Patch</h3>

<p><a href="/assets/vte_osc52.patch">patch code</a></p>

<p><code class="language-plaintext highlighter-rouge">git clone https://github.com/andrewmzhang/vte.git</code></p>

<h3 id="to-install-wo-overriding-default-libvte-install">To Install w/o Overriding Default libvte Install</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Dependencies</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>gtk-doc-tools gobject-introspection valac libvala-dev libgnutls-dev libgirepository1.0-dev gperf


<span class="c"># Will install to /opt/vte</span>
./autogen.sh <span class="nt">--prefix</span><span class="o">=</span>/opt/vte
make
<span class="nb">sudo </span>make <span class="nb">install</span></code></pre></figure>

<h3 id="setting-up-gnome-terminal">Setting Up gnome-terminal</h3>

<p>Initially I tried to devise a way to have 2 different gnome-terminal executables, one that would launch with the doctored libvte library and the other untouched, since I don’t have functionality to turn off OSC 52 escapes once implemented. Unfortunately it seems that gnome-terminal uses the system global name “org.gnome.Terminal” to communicate through the dbus. I don’t know how dbus works, so I didn’t attempt to manipulate it.</p>

<p>When gnome-terminal launches, it actually communicates w/ gnome-terminal-server (or launches it) and gnome-terminal exits (see post on this: <a href="https://eklitzke.org/gnome-terminal-server">gnome-terminal-server-explained</a> ). So we actually need to get gnome-terminal-server to use our doctored lib.</p>

<p>gnome-terminal/gnome-terminal-server version 3.18.3 on the defaul Ubuntu install seems to be a bit different from what sits at the gnome gitlab repository. Instead of trying to install whatever patches Ubuntu utilizes, I opted to relink the gnome-terminal-server executable to point to our doctored lib.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># Will show you what libvte links to</span>
ldd /usr/lib/gnome-terminal/gnome-terminal-server | <span class="nb">grep</span> <span class="s2">"vte"</span> 
<span class="c"># outputs: libvte-2.91.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libvte-2.91.so.0</span>

<span class="c"># Backup gnome-terminal-server</span>
<span class="nb">sudo cp</span> /usr/lib/gnome-terminal/gnome-terminal-server /usr/lib/gnome-terminal/gnome-terminal-server.bak

<span class="c"># Relink the library; Run the patchelf on a non libvte based emulator (eg xterm)</span>
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> patchelf
<span class="nb">sudo </span>patchelf <span class="nt">--replace-needed</span> libvte-2.91.so.0 /opt/vte/lib/libvte-2.91.so.0 /usr/lib/gnome-terminal/gnome-terminal-server</code></pre></figure>

<h4 id="fixing-the-colours">Fixing the colours</h4>

<p>The colours might have changed (for me libvte put up a white background w/ black text). To fix this open gnome-terminal-&gt;profile preferences-&gt;colors</p>

<p>Change the text color to: <code class="language-plaintext highlighter-rouge">#FEF8D9</code>
Change the background color to: <code class="language-plaintext highlighter-rouge">#300A24</code>
Bold color to: [x] Same as text color</p>

<h3 id="setting-up-tmux-and-mosh">Setting Up tmux and mosh</h3>

<p>First, we need to tell tmux to copy via OSC 52. To do this we need to set the clipboard.</p>

<p>Tmux supports OSC 52 but does not pass the “c;” option, according to <a href="https://gist.github.com/yudai/95b20e3da66df1b066531997f982b57b">yudai’s post</a>. However we can force it to pass the “c;” option. Mosh is capable of catching the OSC 52 option c (the default mosh only accepts the “c;” option). Thus adding these lines to the tmux.conf should allow us to copy into local clipboard. I think if you install this <a href="https://github.com/mobile-shell/mosh/pull/1054">mosh pr</a> it supports the other OSC 52 options.</p>

<p>Note: This only works for more recent version of tmux.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># sets tmux to use OSC 52 escape</span>
<span class="nb">set</span> <span class="nt">-g</span> set-clipboard on

<span class="c"># Forces tmux to use the "c;" option</span>
<span class="nb">set</span> <span class="nt">-ag</span> terminal-overrides <span class="s2">"vte*:XT:Ms=</span><span class="se">\\</span><span class="s2">E]52;c;%p2%s</span><span class="se">\\</span><span class="s2">7,xterm*:XT:Ms=</span><span class="se">\\</span><span class="s2">E]52;c;%p2%s</span><span class="se">\\</span><span class="s2">7"</span></code></pre></figure>

<h3 id="contributions">Contributions</h3>
<p>Big thanks to <a href="https://people.eecs.berkeley.edu/~kevinz/">Kevin Zheng</a> for providing most of the code :)</p>]]></content><author><name>Andrew M. Zhang + Kevin Zheng</name></author><summary type="html"><![CDATA[adding osc52 copy paste functionality to gnome-terminal so we can use mosh, remote tmux, and copy paste]]></summary></entry></feed>